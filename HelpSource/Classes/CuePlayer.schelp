TITLE:: CuePlayer
summary:: Organise and execute cues for live and mixed-media works
categories:: Class
related:: Classes/CuePlayerGUI, Classes/Cues, Classes/Timeline

DESCRIPTION::
The CuePlayer is useful for live and mixed electroacoustic works (possibly involving acoustic instruments) when the composer wishes to build a series of processes (cues) and execute them one after another during the course of a piece. The cues are initially organised into an Array, and later on they may be triggered via code, a GUI window or any device/software which outputs midi data, such as a footpedal or a Digital Audio Workstation.

There are lots of features which make the CuePlayer useful for composing in-studio and performing on-stage electroacoustic works using SuperCollider. Please read below and go through this short link::Guides/CuePlayerTutorial:: for more information.



CLASSMETHODS::

METHOD:: new
Create a new CuePlayer instance



INSTANCEMETHODS::



METHOD:: tempo
Set the tempo. Processes may be evaluated with reference to this clock.

ARGUMENT:: bpm
Beats per minute.

returns:: Beats per minute.



anchor::put::

METHOD:: put 
Put cue at cue-number, replacing what is there.

This allows explicitly to create a cue at a specific cue-number. Simply construct your cue as a function and then assign it to a cue-number, (think of the cue-number as the index of the cue-list which holds all processes).  

ARGUMENT:: cueNumber
The cue-number to register the function. 

ARGUMENT:: function
An instance of link::Classes/Function:: or a string representing the path of an scd file; it must return a function.

ARGUMENT:: timeline
An instance of link::Classes/Array:: with time, function pairs. Alternatively a string representing the path of an scd file. The file must return an link::Classes/Array:: of time, function pairs. See link::Classes/Timeline::. 

ARGUMENT:: timelineOptions
An event of timeline options. See link::Classes/Timeline::.

code::

// This is how to make cues at specific cue-numbers.

a = CuePlayer.new; // Create a new CuePlayer instance

a.put(1, { "do something".postln }); // Define 1st cue. Place a function at cue-number 1.
a.put(2, { "this is the 2nd cue".postln }); // Define 2nd cue. Place a function at cue-number 2.
a.put(5, { "& this is the 5th cue".postln }); // Define 5th cue. Place a function at cue-number 5.
::



anchor::add::

METHOD:: add
Add a cue at the end of the cue-list.

ARGUMENT:: function
An instance of link::Classes/Function:: or a string representing the path of an scd file; it must return a function.

ARGUMENT:: timeline
An instance of link::Classes/Array:: with time, function pairs. Alternatively a string representing the path of an scd file. The file must return an link::Classes/Array:: of time, function pairs. See link::Classes/Timeline::. 

ARGUMENT:: timelineOptions
An event of timeline options. See link::Classes/Timeline::. 



anchor::trigger::

METHOD:: trigger
Trigger a cue.

ARGUMENT:: cueNumber
An integer which corresponds to the function (cue) to evaluate.

code::
a = CuePlayer.new; // Create a new CuePlayer instance

// Define cues 1 & 2
a.put(1, { "this is cue one".postln }); 
a.put(2, { "this is cue two".postln }); 

// Trigger cues
a.trigger(1); // trigger cue 1
a.trigger(2); // trigger cue 2
::



anchor::setCurrent::

METHOD:: setCurrent
Set current cue.

ARGUMENT:: cueNumber
An integer which corresponds to the function (cue).



anchor::next::

METHOD:: next
Trigger next cue.



METHOD:: gui
Create a GUI window for the CuePlayer.

This method brings up a convenient window allowing the user to control the CuePlayer from a Graphic User Interface. Through the window the user can monitor  input/output buses, trigger cues, use a timer and a metronome and control the server's level.

ARGUMENT:: monitorInChannels
An integer (0 - 8) for creating input level meters.

ARGUMENT:: monitorOutChannels
An integer (1 - 48) for creating output level meters.

ARGUMENT:: options
An event of options. See link::Classes/CuePlayerGUI:: for more information. 

code::
b = CuePlayer.new; // Create a new CuePlayer instance

// Bring up the CuePlayer window.
b.gui(
	monitorInChannels: 5, // Monitor 5 input channels
	monitorOutChannels: 24, // Monitor 24 output channels

	options: (
		monitorInOffset:  2, // Offset input monitoring by 2; (hence monitor inputs 3,4,5,6,7 here)
		largeDisplay: false, // Show/hide the big window displaying current cue-number. Useful for the performers on stage.
		left: 1000, // Left bound for the CuePlayer window.
		top: 300, // Top bound for the CuePlayer window.
		timer: true, // Show/hide timer
		metronome: true, // Show/hide metronome
		serverControls: true, // Show/hide server controls: mute-button, volume-slider, Peak CPU, Number of Synths
		shortcuts: false // Use shortcuts; default is false (recommended)
	)
);
::



METHOD:: clearMIDI
Clear all MIDI functions defined with midiTrigger or midiTriggerVelocity.









METHOD:: freeOscTrigger
Free the OSC trigger that was created with oscTrigger.




METHOD:: plot
Graphic output of the current timeline items.

ARGUMENT:: cueNumber
If provided plots the selected cue.





METHOD:: enableLiveReload
Enable live reloading of scripts provided as path strings. See add and put methods.

METHOD:: disableLiveReload
Diable live reloading of scripts provided as path strings. See add and put methods.






METHOD:: clock
Return the clock currently in use by this CuePlayer instance.

returns:: a link::Classes/TempoClock:: instance.

METHOD:: sendOSC
Send an open sound control message.

ARGUMENT:: ip
ARGUMENT:: port
ARGUMENT:: msg

METHOD:: useGlobalClock
Use the common clock. This is a TempoClock used by all CuePlayer instances. To be used when
using multiple synced CuePlayers.

METHOD:: midiTrigger
Set up a midi trigger on a given note and channel.

ARGUMENT:: note
ARGUMENT:: channel

METHOD:: oscTrigger
Set up an OSC trigger.

ARGUMENT:: message
(describe argument here)

ARGUMENT:: path
(describe argument here)

METHOD:: guiInstance
Return the instnace of link::Classes/CuePlayerGUI:: used by this CuePlayer.

METHOD:: midiTriggerVelocity
Set up a midi trigger on a given note and channel. The midi velocity controls the
cue number (1-127).

ARGUMENT:: note
ARGUMENT:: channel
ARGUMENT:: offset
Add a number to the selected cue. To be used in the case of more than 127 cues.

EXAMPLES::

code::
(some example code)
::
